name: Build, test and release Python wheels

on: [push, pull_request]

env:
  PACKAGE_VERSION: '0.0.1'
  PACKAGE_NAME: py-build-cmake-example
  TWINE_REPOSITORY: testpypi # or pypi

jobs:
  # First we build the wheels natively (build system == host system).
  # This allows us to import the compiled modules, and automatically generate
  # stub files for them.
  # Those stub files can then later be included in the cross-compiled packages
  # as well (because we can't generate them while cross-compiling).
  # By building the native wheels first, we can already start testing while the
  # cross-compiled versions are being built.
  native-build-linux:
    name: Build wheels for ${{ matrix.triple }} - ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    container: ghcr.io/tttapa/docker-cross-python:${{ matrix.triple }}-py${{ matrix.python-version }}-1.0.4
    strategy:
      matrix:
        triple: ['x86_64-centos7-linux-gnu']
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        uses: ./.github/workflows/python-build
        with:
          host: ${{ matrix.triple }}
          python-version: ${{ matrix.python-version }}
          export-stubs: stubs

      - name: Upload stubs
        uses: actions/upload-artifact@v3
        with:
          name: stubs-${{ matrix.python-version }}
          retention-days: 1
          path: stubs.tar

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: wheels-native
          path: ./dist/*.whl

  # Testing is done in the official Python Docker container: https://hub.docker.com/_/python/
  # This should match more closely to the environment that users might use.
  # It also ensures that we're not accidentally depend on any libraries specific
  # to the build container.
  test-linux:
    name: Run tests for ${{ matrix.triple }} - ${{ matrix.python-version }}
    needs: [native-build-linux]
    runs-on: ubuntu-latest
    container: python:${{ matrix.python-version }}${{ matrix.python-suffix }}-bullseye
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        include:
          - python-version: '3.12'
            python-suffix: '-rc'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-native
          path: dist

      - name: Test
        run: |
          python3 -m pip install -U pip
          python3 -m pip install --find-links=dist "${PACKAGE_NAME}[test]==${PACKAGE_VERSION}"
          pytest -rP

  # After the native build, we have the stub files, and we can start cross-
  # compiling for other architectures.
  cross-build-linux:
    name: Cross-build wheels for ${{ matrix.triple }} - ${{ matrix.python-version }}
    needs: [native-build-linux]
    runs-on: ubuntu-latest
    container: ghcr.io/tttapa/docker-cross-python:${{ matrix.triple }}-py${{ matrix.python-version }}-1.0.4
    strategy:
      matrix:
        triple: ['aarch64-rpi3-linux-gnu', 'armv7-neon-linux-gnueabihf', 'armv6-rpi-linux-gnueabihf']
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download stubs
        uses: actions/download-artifact@v3
        with:
          name: stubs-${{ matrix.python-version }}

      - name: Extract stubs
        run: tar xf stubs.tar

      - name: Build
        uses: ./.github/workflows/python-build
        with:
          host: ${{ matrix.triple }}
          python-version: ${{ matrix.python-version }}

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: wheels-cross
          path: ./dist/*.whl

  # Aside from building binary wheels, we also want to prepare a source
  # distribution, and make sure that it can be used to build our package.
  source-build-linux:
    name: Build source distribution for ${{ matrix.triple }} - ${{ matrix.python-version }}
    needs: [native-build-linux]
    runs-on: ubuntu-latest
    container: ghcr.io/tttapa/docker-cross-python:${{ matrix.triple }}-py${{ matrix.python-version }}-1.0.4
    strategy:
      matrix:
        triple: ['x86_64-centos7-linux-gnu']
        python-version: ['3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download stubs
        uses: actions/download-artifact@v3
        with:
          name: stubs-${{ matrix.python-version }}

      - name: Extract stubs
        run: tar xf stubs.tar

      - name: Build
        uses: ./.github/workflows/python-build
        with:
          host: ${{ matrix.triple }}
          python-version: ${{ matrix.python-version }}
          build-args: ''

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: wheels-src
          path: ./dist/*.tar.gz

  # Build for Windows and macOS using cibuildwheel.
  # Since we're not specifying any cross-compilation settings, py-build-cmake
  # will use its default cross-compilation settings for Windows on ARM64.
  # For macOS, we build universal wheels that work on both Intel and M1/M2 macs.
  build-win-mac:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        with:
          output-dir: dist

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: wheels-win-mac
          path: ./dist/*.whl

  # Finally, release the package to PyPI. Make sure to add your PyPI token as
  # a secret with the name “PyPI”:
  # https://docs.github.com/en/actions/security-guides/encrypted-secrets
  # This step will fail if the package version does not match the Git tag of the
  # release.
  release:
    if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
    needs: [test-linux, cross-build-linux, source-build-linux, build-win-mac]
    runs-on: ubuntu-latest
    container: python:3.11-bullseye
    steps:
      - name: Download native wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-native
          path: dist
      - name: Download cross wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-cross
          path: dist
      - name: Download Windows and macOS wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-win-mac
          path: dist
      - name: Download sdist
        uses: actions/download-artifact@v3
        with:
          name: wheels-src
          path: dist

      - name: Install Twine
        run: python3 -m pip install -U pip twine
      - name: Install package
        run: python3 -m pip install --find-links=dist ${PACKAGE_NAME}==${PACKAGE_VERSION}
      - name: Check package version
        shell: bash
        run: >
          [ "${{ github.event.release.tag_name }}" ==
          "$(python3 -c 'import ${{ env.MODULE_NAME }} as m; print(m.__version__)')" ]

      - name: Upload to PyPI
        run: >
          python3 -m twine upload -r ${{ env.TWINE_REPOSITORY }}
          dist/*.whl dist/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PyPI }}
