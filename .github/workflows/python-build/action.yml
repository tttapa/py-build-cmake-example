name: Python build
description: Cross-compile the Python package
inputs:
  host:
    required: true
    description: >
      The GNU host triple of the system to cross-compile for, e.g.
      'x64_64-centos7-linux-gnu'.
  python-version:
    required: true
    description: >
      The Python version to use for the build, e.g. '3.11'.
  export-stubs:
    required: false
    default: ''
    description: >
      Name of the .tar file to export the Python stub files of the extension
      modules into. Requires that we can load the compiled modules in the native
      Python interpreter.
  build-args:
    required: false
    default: '-w'
    description: >
      Arguments to pass to the PyPA build tool. By default, we build a wheel
      directly. Set to '' to build a source distribution first.

runs:
  using: composite
  steps:

    # Cache the Conan cache folder to speed up installation of the dependencies.
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        # Key is unique, to force updating the cache, but we still want the
        # cache to be restored, so we use restore-keys with a matching prefix.
        key: ${{ runner.os }}-${{ inputs.host }}-${{ inputs.python-version }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ inputs.host }}-${{ inputs.python-version }}-

    # Make sure that Conan, PyPA pip and build are installed and up-to-date.
    - name: Install tools
      shell: bash
      run: python3 -m pip install -U conan pip build

      # Create a Conan profile for the build and the host machine.
      # The build profile is detected by Conan automatically.
      # The host profile is based on the profile that is already available in
      # the Docker container we're using, and was generated by
      # https://github.com/tttapa/docker-cross-python/blob/main/gen-conan-profile.py.
      # This profile selects the right compilers for cross-compilation, and
      # includes the a CMake toolchain file that knows how to locate the Python
      # libraries for the host. This toolchain file is generated by
      # https://github.com/tttapa/docker-cross-python/blob/main/gen-cmake-toolchain.py
      # We append a configuration setting to it to specifically ask for a
      # multi-config CMake generator, since that's what we'll be using to build
      # the Python package later on.
    - name: Prepare Conan configuration
      shell: bash
      run: |
        conan profile detect -f
        mkdir build
        cp /opt/${{ inputs.host }}/conan/profiles/${{ inputs.host }} build/profile
        echo 'tools.cmake.cmaketoolchain:generator="Ninja Multi-Config"' >> build/profile

    # We now call conan install to install the dependencies for our project, so
    # they are available when we go on to build our package later.
    - name: Install dependencies
      shell: bash
      run: |
        for cfg in Debug Release; do
          conan install . -of build -pr:h=build/profile --build=missing -s build_type=$cfg
        done

    # The toolchain file generated by Conan's CMakeDeps generator sets the
    # CMAKE_PREFIX_PATH variable, which is ignored when cross-compiling.
    # For cross-compilation, it should set the CMAKE_FIND_ROOT_PATH variable,
    # which is why we patch the toolchain file here.
    - name: Patch Conan toolchain file
      shell: bash
      run: |
        sed -i 's@CMAKE_PREFIX_PATH@CMAKE_FIND_ROOT_PATH@g' build/conan_toolchain.cmake

    # We need to write a py-build-cmake configuration file so it uses the
    # CMakeDeps toolchain file generated by Conan. Note that we select the
    # configurations we want to include in our package, and we select the
    # right CMake generator. This should match the configurations and generator
    # we used in the “Prepare Conan configuration” and “Install dependencies”
    # steps above.
    # Finally, we can specify some CMake options: the USE_GLOBAL_PYBIND11 option
    # is used in cmake/QueryPythonForPybind11.cmake, and ensures that
    # find_package is used to locate the version of pybind11 that was installed
    # by Conan, rather than the one in the Python virtual environment.
    - name: Configure package
      shell: bash
      run: |
        cat << EOF > build/conan-py-build-cmake.cross.toml
        # Use Conan's toolchain to locate dependencies and include the
        # host-specific toolchain file.
        toolchain_file = "$PWD/build/conan_toolchain.cmake"
        # Select the configurations to include in your package
        [cmake]
        generator = "Ninja Multi-Config"
        config = ["Debug", "Release"]
        # Use Conan's version of pybind11
        [cmake.options]
        USE_GLOBAL_PYBIND11 = "On"
        EOF

    # Optionally, we add another CMake option to enable Python stub file
    # generation. Stubs are disabled by default when cross-compiling, because
    # it requires importing the compiled Python modules, which is not possible
    # in general. If we know that the build Python can run modules for the host
    # Python, we can safely override the default, and generate the stubs anyway.
    - name: Configure stubs
      if: ${{ inputs.export-stubs != '' }}
      shell: bash
      run: echo 'WITHOUT_PY_STUBS = "Off"' >> build/conan-py-build-cmake.cross.toml

    # After setting up all configuration files, we can finally build the Python
    # package using the PyPA build tool. Note that we provide two cross-
    # compilation config files:
    # The first one is included in the Docker container and sets up the
    # necessary general settings for cross-compilation. It is generated by
    # https://github.com/tttapa/docker-cross-python/blob/main/gen-py-build-cmake-cross-config.py
    # The second is the project-specific file we just created in the “Configure
    # package” step above. It should be included last because it overrides the
    # 'toolchain_file' option that is also set by the first config file.
    - name: Build package
      shell: bash
      run: |
        python3 -m build ${{ inputs.build-args }} . \
          -C--cross=/opt/${{ inputs.host }}/cmake/${{ inputs.host }}.py-build-cmake.cross.toml \
          -C--cross=$PWD/build/conan-py-build-cmake.cross.toml
      env:
        LDFLAGS: '-static-libstdc++ -static-libgcc'

    # If the user requested the stubs to be exported, we use py-build-cmake's
    # command-line interface to install them to a staging directory, and then
    # add them to an archive. We use the same cross-compilation config files
    # that we passed to the build command in the previous step.
    - name: Export stubs
      if: ${{ inputs.export-stubs != '' }}
      shell: bash
      run: |
          python3 -m pip install -U py-build-cmake~=0.1.7
          python3 -m py_build_cmake.cli \
            --cross=/opt/${{ inputs.host }}/cmake/${{ inputs.host }}.py-build-cmake.cross.toml \
            --cross=$PWD/build/conan-py-build-cmake.cross.toml \
            install --component python_stubs -- --prefix staging/python-src
          tar cf ${{ inputs.export-stubs }}.tar -C staging python-src
